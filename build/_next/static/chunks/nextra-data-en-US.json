{"/components/background":{"title":"Background","data":{"":"A frame that matches the current theme's Background/Primary color. See more about themes here.","example#Example":"Scope:Background {\n  Size = UDim.fromScale(1, 1)\n}"}},"/components/button":{"title":"Button","data":{"":"A button that can be interacted with.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the button.\tText\tFusion.UsedAs<string>?\tThe text of the button (defaults to Button).\tVariant\t(\"Primary\" | \"Secondary\" | \"Destructive\")?\tThe button variant (defaults to Primary).","example#Example":"Scope:Button {\n  Width = UDim.new(1, 0),\n  Text = \"Click Me!\",\n  Variant = \"Primary\" :: \"Primary\"\n}"}},"/components/accordion":{"title":"Accordion","data":{"":"Sections of information that are expandable and collapsable.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the accordion.\tSections\t{{ Title: string, Content: string }}\tThe sections for the accordion.\tExpandedSection\tFusion.UsedAs<number?>?\tThe index of the section in the Sections array to be expanded. (Set to nil to have no section expanded).","example#Example":"Scope:Accordion {\n  Width = UDim.new(1, 0),\n  Sections = {\n    { Title = \"Section One\", Content = \"I am Section One! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor. incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis.\" },\n    { Title = \"Section Two\", Content = \"I am Section Two! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor. incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis.\" },\n    { Title = \"Section Three\", Content = \"I am Section Three! Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor. incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis.\" }\n  },\n  ExpandedSection = 2\n}"}},"/components/checkbox":{"title":"Checkbox","data":{"":"A checkbox that can be one of three states (enabled, disabled and nil).","properties#Properties":"Name\tType\tDescription\tEnabled\tFusion.UsedAs<boolean?>?\tThe state of the checkbox.","example#Example":"Scope:Checkbox {\n  Enabled = true\n}"}},"/components/container":{"title":"Container","data":{"":"A super customisable container that can have a header, and can be expanded and collapsed. (Height is automatically determined).","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs?\tThe width of the container\tHeader\tHeaderProps\tThe properties for the container's header (omit if you do not want one).","header-properties-headerprops#Header Properties (HeaderProps)":"Name\tType\tDescription\tText\tFusion.UsedAs<string>\tThe Text (title) for the header.\tIsExpanded\tFusion.UsedAs<boolean>?\tIf the container should be expanded.\tContent\tFusion.UsedAs<Fusion.Child>?\tThe header content (aligned to the right).\tDisabled\tFusion.UsedAs?\tIf the header is to be disabled. Designed for toggling the header via a state object.","example#Example":"Scope:Container {\n  Header = { Text = \"My Awesome Container üöÄ\" },\n  [Children] = {\n    Scope:TextLabel {\n      Text = \"Content Goes Here :)!\\nContent Goes Here :)!\\nContent Goes Here :)!\",\n      LineHeight = 1.4,\n    },\n    \n    Scope:PaddingLarge()\n  }\n}"}},"/components/imageBackground":{"title":"Image Background","data":{"":"An image with a background.","properties#Properties":"Name\tType\tDescription\tImageSource\tstring | EditableImage\tThe source of the image.\tImageSourceSize\tFusion.UsedAs<Vector3>\tThe size of the image source. Uses Vector3 for performance reasons - only the X and Z components are used.","example#Example":"Scope:ImageBackground {\n  Size = UDim2.new(1,0, 0,256),\n  ImageSource = \"rbxassetid://89904945503839\",\n  ImageSourceSize = Vector3.new(256, 0, 256)\n}"}},"/components/codeLabel":{"title":"Code Label","data":{"":"A component that displays code.","properties#Properties":"Name\tType\tDescription\tText\tFusion.UsedAs<string?>\tThe text content of the component.\tTextSize\tFusion.UsedAs?\tThe size of the text.\tFocus\tFusion.UsedAs<\"Title\" | \"Body\">?\tThe focus mode of the text label. (affects the text color).\tWeight\tFusion.UsedAs<Enum.FontWeight>?\tThe font weight of the text label.\tStyle\tFusion.UsedAs<Enum.FontStyle>?\tThe font style of the text label.\tFontId\tFusion.UsedAs<number>?\tThe font Id of the text label (defaults to the Builder Sans font Id).","example#Example":"Scope:CodeLabel {\n  Text = \"local function()\\n    return print(\\\"Hello World! üëã\\\")\\nend\"\n}"}},"/components/navigation":{"title":"Navigation","data":{"":"A component with sections that can be hovered and selected.","properties#Properties":"Name\tType\tDescription\tSections\t{ string | Fusion.Child }\tThe sections for the navigation component.\tActiveSection\tFusion.UsedAs<number>?\tThe index of the section in the Sections array to be active. (Set to nil to have no section active).\tDefaultActiveSection\tFusion.UsedAs<number?>?\tIf no section is active then this section will automatically become active.\tFillDirection\tFusion.UsedAs<Enum.FillDirection>?\tThe fill direction for the navigation (defaults to Enum.FillDirection.Horizontal).","example#Example":"Scope:Navigation {\n  Sections = { \"Hello World\", \"Baz\", \"Foo Bar\" },\n  DefaultActiveSection = 2,\n  ActiveSection = 3\n}"}},"/components/progress":{"title":"Progress","data":{"":"A highly customisable progress bar with optional sections.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the progress bar.\tProgressPercent\tFusion.UsedAs<number>?\tThe amount of progress that has been made (number between 0 and 1). (defaults to 1).\tSections\tFusion.UsedAs<number? | { string }?>?\tOptional sections for the progress bar. Use an array of strings if the sections have titles, otherwise use an integer.","example#Example":"Scope:Progress {\n  Width = UDim.new(1, 0),\n  ProgressPercent = .65,\n  Sections = { \"‚åõ Step One: Loading\", \"üõ°Ô∏è Step Two: Verifying\", \"üíæ Step 3: Applying\" }\n}"}},"/components/scrollable":{"title":"Scrollable","data":{"":"An element with scrollable content. (only the Y axis is supported currently - X axis coming soon üëÄ).","properties#Properties":"Name\tType\tDescription\tCanvasPositionY\tFusion.UsedAs<number>?\tThe y position of the scroll bar.","example#Example":"Scope:Scrollable {\n  Size = UDim2.new(1,0, 0,150),\n  CanvasSize = UDim2.fromOffset(0, 500),\n  [Children] = Scope:TextLabel {\n    Text = \"Scrollable Content Goes Here :)!\\nScrollable Content Goes Here :)!\\nScrollable Content Goes Here :)!\",\n    LineHeight = 1.4,\n  },\n}"}},"/components/slider":{"title":"Slider","data":{"":"Allows the user to select a value (from 0 to 1).","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the slider.\tProgressPercent\tFusion.UsedAs<number>?\tThe progress (value between 0 and 1) of the slider.\tStepSize\tFusion.UsedAs<number>?\tThe amount that is incremented when the user is dragging the slider.","example#Example":"Scope:Slider {\n  Width = UDim.new(1, 0),\n  ProgressPercent = .75\n}"}},"/components/switch":{"title":"Switch","data":{"":"A switch component.","properties#Properties":"Name\tType\tDescription\tSize\tFusion.UsedAs<\"Small\" | \"Large\">?\tThe size mode for the switch.\tEnabled\tFusion.UsedAs<boolean>?\tIf the switch is to be enabled","example#Example":"Scope:Switch {\n  Size = \"Large\" :: \"Large\",\n  Enabled = true\n}"}},"/components/textInput":{"title":"Text Input","data":{"":"An input for entering text.","properties#Properties":"Name\tType\tDescription\tWidth\tFusion.UsedAs<UDim>?\tThe width of the text input.\tPlaceholder\tFusion.UsedAs<string?>\tThe placeholder for the text input.\tValue\tFusion.UsedAs<string?>\tThe value of the text input.","example#Example":"Scope:TextInput {\n  Width = UDim.new(1, 0),\n  Placeholder = \"Enter User ID\"\n}"}},"/components/widget":{"title":"Widget","data":{"":"A plugin widget with a Background component.","properties#Properties":"Name\tType\tDescription\tId\tstring\tThe Identifier of the widget.\tTitle\t(string | Fusion.Value<string>\tFusion.Computed<string>)?\tThe title of the widget.\tInitDockState\tEnum.InitialDockState?\tThe initial dock state for the widget.\tInitEnabled\tboolean?\tThe enabled state of the Widget if it does not have a saved state from a previous session.\tOverrideEnabledRestore\tboolean?\tIf true, will override any saved enabled state with the InitEnabled value.\tFloatXSize\tnumber?\tThe initial pixel width of the PluginGui when floating.\tFloatYSize\tnumber?\tThe initial pixel height of the PluginGui when floating.\tMinWidth\tnumber?\tThe minimum pixel width of the PluginGui. (defaults to FloatXSize).\tMinHeight\tnumber?\tThe minimum pixel height of the PluginGui. (defaults to FloatYSize).\tDebugMode\tboolean?\tIf true then an unhydrated copy of the widgets children is parented to StarterGui.","example#Example":"Scope:Widget {\n  Id = \"IgnitePlugin \",\n  Title = \"Ignite Plugin\",\n  InitDockState = Enum.InitialDockState.Float,\n  FloatXSize = 300, FloatYSize = 150,\n}"}},"/components/textLabel":{"title":"Text Label","data":{"":"A component that displays text.","properties#Properties":"Name\tType\tDescription\tText\tFusion.UsedAs<string?>\tThe text content of the component.\tTextSize\tFusion.UsedAs?\tThe size of the text.\tFocus\tFusion.UsedAs<\"Title\" | \"Body\">?\tThe focus mode of the text label. (affects the text color).\tWeight\tFusion.UsedAs<Enum.FontWeight>?\tThe font weight of the text label.\tStyle\tFusion.UsedAs<Enum.FontStyle>?\tThe font style of the text label.\tFontId\tFusion.UsedAs<number>?\tThe font Id of the text label (defaults to the Builder Sans font Id).","example#Example":"Scope:TextLabel {\n  Text = \"Hello World! üëã\"\n}"}},"/":{"title":"About Ignite","data":{"":"Ignite is a UI library for developing Roblox plugins. It includes 10+ goregeous high-dpi compatible components.","getting-started#Getting Started":"Install Ignite via Wally or via github releases.\nignite = \"mightypart/ignite@1.0.0\"\nSetup your default.project.json (if using rojo).\n{\n  \"name\": \"my_ignite_plugin\",\n  \"tree\": {\n    \"$className\": \"DataModel\",\n    \"ServerStorage\": {\n      \"Plugin\": {\n        \"$path\": \"src\", // replace with the path to your plugin's source.\n        \"Packages\": { \"$path\": \"Packages\" }\n      }\n    }\n  }\n}\nSetup the root script of your plugin.\n--!strict\n--> Modules -------------------------------------------------------------------------------------------\nlocal Packages = -- Path to Packages.\nlocal Fusion = require(Packages.Fusion)\nlocal Ignite = require(Packages.Ignite)\n-------------------------------------------------------------------------------------------------------\n--> Variables -----------------------------------------------------------------------------------------\nlocal Scope = Fusion.scoped(Fusion, Ignite)\n-------------------------------------------------------------------------------------------------------\n-- We need to pass the plugin to the scope as it can\n-- only be obtained in the plugin's root (this) script.\nScope:SetPlugin(plugin)\nExample Ignite project.\n--!strict\n--> Modules -------------------------------------------------------------------------------------------\nlocal Packages = -- Path to Packages.\nlocal Fusion = require(Packages.Fusion)\nlocal Ignite = require(Packages.Ignite)\n-------------------------------------------------------------------------------------------------------\n--> Variables -----------------------------------------------------------------------------------------\nlocal Scope = Fusion.scoped(Fusion, Ignite)\nlocal Children, OnEvent, peek = Fusion.Children, Fusion.OnEvent, Fusion.peek\n-------------------------------------------------------------------------------------------------------\n-- We need to pass the plugin to the scope as it can\n-- only be obtained in the plugin's root (this) script.\nScope:SetPlugin(plugin)\nlocal CounterState = Scope:Value(0)\nlocal ComputeLabelText = Scope:Computed(function(use) return `Counter is: {use(CounterState)}` end)\nScope:Widget {\n  Id = \"IgnitePlugin\",\n  Title = \"My First Ignite Plugin üöÄ\",\n  InitDockState = Enum.InitialDockState.Left,\n  FloatXSize = 300, FloatYSize = 800,\n  [Children] = {\n    Scope:TextLabel {\n      Text = ComputeLabelText,\n      LayoutOrder = 0\n    },\n    Scope:Button {\n      Text = \"Increment Counter!\",\n      LayoutOrder = 1,\n      [OnEvent \"MouseButton1Click\"] = function()\n        CounterState:set(peek(CounterState) + 1)\n      end\n    },\n    Scope:New \"UIListLayout\" {\n      SortOrder = Enum.SortOrder.LayoutOrder,\n      Padding = UDim.new(0, 8)\n    },\n    Scope:New \"UIPadding\" {\n      PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8),\n      PaddingTop = UDim.new(0, 8), PaddingBottom = UDim.new(0, 8)\n    }\n  }\n}"}},"/utilities/plugin":{"title":"Plugin","data":{"":"Utilities for interacting with the plugin object.","setplugin#:SetPlugin":"","arguements#Arguements":"Name\tType\tDescription\tscope\tFusion.Scope\tThe scope to set the plugin object for.\t_plugin\tPlugin\tThe plugin object to set.","getplugin#:GetPlugin":"Name\tType\tDescription\tscope\tFusion.Scope\tThe scope to get the plugin for."}},"/utilities/theme":{"title":"Theme","data":{"":"Utilities for changing the theme and getting items from the current theme.","settheme#:SetTheme":"","arguements#Arguements":"Name\tType\tDescription\tscope\tFusion.Scope\tThe scope to set the theme for.\ttheme\tThemeConfig | DefaultTheme\tThe new theme for the scope.\t\ntype ThemeConfig = {\n  Background: {\n    Primary: Color3,\n    Secondary: Color3,\n    Tertiary: Color3,\n    Stroke: Color3\n  },\n  Text: {\n    Title: Color3,\n    Body: Color3\n  },\n  Accent: {\n    Primary: Color3,\n    Secondary: Color3,\n    Destructive: Color3\n  }\n}\ntype DefaultTheme = \"Dark\"","getthemeitem#:GetThemeItem":"Name\tType\tDescription\tscope\tFusion.Scope\tThe scope to get the theme item for.\titem\tFusion.UsedAs<ThemeItem>\tThe theme item to get.\tfeedbackMode\tFusion.UsedAs<FeedbackMode?>?\tThe feedback mode to apply to the item.\ttwInfo\tFusion.UsedAs<TweenInfo?>? | false\tThe tween info to apply to item. Defaults to TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out).\t\ntype ThemeItem = \"Background/Primary\" | \"Background/Secondary\" | \"Background/Tertiary\" | \"Background/Stroke\" | \"Text/Title\" | \"Text/Body\" | \"Accent/Primary\" | \"Accent/Secondary\" | \"Accent/Destructive\"\ntype FeedbackMode = \"Default\" | \"Hover\" | \"Focus\" | \"Highlight\""}}}